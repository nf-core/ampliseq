/*
 * -------------------------------------------------
 *  nf-core/ampliseq Nextflow config file
 * -------------------------------------------------
 * Default config options for all environments.
 */

// Global default params, used in configs
params {

  // Workflow flags
  help = false
  extension = "/*_R{1,2}_001.fastq.gz"
  reads = "data" + "${extension}"
  readPaths = false
  single_end = false
  outdir = './results'
  FW_primer = false
  RV_primer = false 
  classifier = false
  metadata = false
  igenomes_base = "./iGenomes"
  tracedir = "${params.outdir}/pipeline_info"
  clusterOptions = false
  qiime_timezone = 'Europe/Berlin'

  // Defines all parameters that are independent of a test run
  trunc_qmin = 25 //to calculate params.trunclenf and params.trunclenr automatically
  trunclenf = false
  trunclenr = false
  metadata_category = false
  retain_untrimmed = false
  exclude_taxa = "mitochondria,chloroplast"
  keepIntermediates = false
  classifier_removeHash = false
  min_frequency = false
  min_samples = false
  multipleSequencingRuns = false
  phred64 = false
  split = "-"

  //Database specific parameters
  //currently only this is compatible with process make_SILVA_132_16S_classifier
  reference_database = "https://www.arb-silva.de/fileadmin/silva_databases/qiime/Silva_132_release.zip"
  dereplication = 99

  // Boilerplate options
  name = false
  multiqc_config = false
  email = false
  email_on_fail = false
  max_multiqc_email_size = 25.MB
  plaintext_email = false
  monochrome_logs = false
  help = false
  igenomes_base = 's3://ngi-igenomes/igenomes/'
  tracedir = "${params.outdir}/pipeline_info"
  igenomes_ignore = false
  custom_config_version = 'master'
  custom_config_base = "https://raw.githubusercontent.com/nf-core/configs/${params.custom_config_version}"
  hostnames = false
  config_profile_description = false
  config_profile_contact = false
  config_profile_url = false

  // Defaults only, expecting to be overwritten
  max_memory = 128.GB
  max_cpus = 16
  max_time = 240.h

}

//export Time Zone required for QIIME2 2019.10
env {
  TZ = params.qiime_timezone
}

// Load base.config by default for all pipelines
includeConfig 'conf/base.config'

// Container slug. Stable releases should specify release tag!
// Developmental code should specify :dev
process.container = 'nfcore/ampliseq:dev'

// Load base.config by default for all pipelines
includeConfig 'conf/base.config'

// Load nf-core custom profiles from different Institutions
try {
  includeConfig "${params.custom_config_base}/nfcore_custom.config"
} catch (Exception e) {
  System.err.println("WARNING: Could not load nf-core/config profiles: ${params.custom_config_base}/nfcore_custom.config")
}
// Load nf-core/ampliseq custom profiles from different Institutions
try {
  includeConfig "${params.custom_config_base}/pipeline/ampliseq.config"
} catch (Exception e) {
  System.err.println("WARNING: Could not load nf-core/config/ampliseq profiles: ${params.custom_config_base}/pipeline/ampliseq.config")
}

profiles {
  conda { process.conda = "$baseDir/environment.yml" }
  debug { process.beforeScript = 'echo $HOSTNAME' }
  docker {
    docker.enabled = true
    docker.temp = 'auto'
    env {
      JOBLIB_TEMP_FOLDER="/tmp"
    }
    // Avoid this error:
    //   WARNING: Your kernel does not support swap limit capabilities or the cgroup is not mounted. Memory limited without swap.
    // Testing this in nf-core after discussion here https://github.com/nf-core/tools/pull/351
    // once this is established and works well, nextflow might implement this behavior as new default.
    docker.runOptions = '-u \$(id -u):\$(id -g)'
  }
  singularity {
    singularity.enabled = true
    singularity.autoMounts = true
  }
  test { includeConfig 'conf/test.config' }
  test_multi { includeConfig 'conf/test_multi.config' }
  test_manifest { includeConfig 'conf/test_manifest.config' }
}

// Export this variable to prevent local Python libraries from conflicting with those in the container
env {
  PYTHONNOUSERSITE = 1
}

// Capture exit codes from upstream processes when piping
process.shell = ['/bin/bash', '-euo', 'pipefail']

timeline {
  enabled = true
  file = "${params.tracedir}/execution_timeline.html"
}
report {
  enabled = true
  file = "${params.tracedir}/execution_report.html"
}
trace {
  enabled = true
  file = "${params.tracedir}/execution_trace.txt"
}
dag {
  enabled = true
  file = "${params.tracedir}/pipeline_dag.svg"
}

manifest {
  name = 'nf-core/ampliseq'
  author = 'Daniel Straub, Alexander Peltzer'
  homePage = 'https://github.com/nf-core/ampliseq'
  description = '16S rRNA amplicon sequencing analysis workflow using QIIME2'
  homePage = 'https://github.com/nf-core/ampliseq'
  version = '1.2.0dev'
  mainScript = 'main.nf'
  nextflowVersion = '>=19.10.0'
  version = '1.2.0dev'
}

// Function to ensure that resource requirements don't go beyond
// a maximum limit
def check_max(obj, type) {
  if (type == 'memory') {
    try {
      if (obj.compareTo(params.max_memory as nextflow.util.MemoryUnit) == 1)
        return params.max_memory as nextflow.util.MemoryUnit
      else
        return obj
    } catch (all) {
      println "   ### ERROR ###   Max memory '${params.max_memory}' is not valid! Using default value: $obj"
      return obj
    }
  } else if (type == 'time') {
    try {
      if (obj.compareTo(params.max_time as nextflow.util.Duration) == 1)
        return params.max_time as nextflow.util.Duration
      else
        return obj
    } catch (all) {
      println "   ### ERROR ###   Max time '${params.max_time}' is not valid! Using default value: $obj"
      return obj
    }
  } else if (type == 'cpus') {
    try {
      return Math.min( obj, params.max_cpus as int )
    } catch (all) {
      println "   ### ERROR ###   Max cpus '${params.max_cpus}' is not valid! Using default value: $obj"
      return obj
    }
  }
}
